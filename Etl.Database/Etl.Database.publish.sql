/*
Deployment script for Etl.Database

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "Etl.Database"
:setvar DefaultFilePrefix "Etl.Database"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL12.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL12.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE Cyrillic_General_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dmidp]...';


GO
CREATE USER [dmidp] FOR LOGIN [dmidp];


GO
PRINT N'Set dmidp as db_owner';


GO
EXECUTE sp_addrolemember @rolename = N'db_owner', @membername = N'dmidp';


GO
PRINT N'Creating [etl]...';


GO
CREATE SCHEMA [etl]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [etl].[EtlOutcomingMailAttachments]...';


GO
CREATE TABLE [etl].[EtlOutcomingMailAttachments] (
    [Id]                 BIGINT           IDENTITY (1, 1) NOT NULL,
    [EtlOutcomingMailId] BIGINT           NOT NULL,
    [EtlPackageId]       UNIQUEIDENTIFIER NOT NULL,
    [EtlSessionId]       UNIQUEIDENTIFIER NOT NULL,
    [FileName]           NVARCHAR (MAX)   NOT NULL,
    CONSTRAINT [PK_EtlOutcomingMailAttachments] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [etl].[EtlOutcomingMails]...';


GO
CREATE TABLE [etl].[EtlOutcomingMails] (
    [Id]           BIGINT           IDENTITY (1, 1) NOT NULL,
    [EtlPackageId] UNIQUEIDENTIFIER NOT NULL,
    [EtlSessionId] UNIQUEIDENTIFIER NOT NULL,
    [Subject]      NVARCHAR (MAX)   NOT NULL,
    [From]         NVARCHAR (MAX)   NOT NULL,
    [To]           NVARCHAR (MAX)   NOT NULL,
    [InsertedDate] DATETIME         NULL,
    CONSTRAINT [PK_EtlOutcomingMails] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [etl].[EtlIncomingMailAttachments]...';


GO
CREATE TABLE [etl].[EtlIncomingMailAttachments] (
    [SeqId]        INT              IDENTITY (1, 1) NOT NULL,
    [EtlPackageId] UNIQUEIDENTIFIER NOT NULL,
    [EtlSessionId] UNIQUEIDENTIFIER NOT NULL,
    [FileName]     NVARCHAR (255)   NOT NULL,
    CONSTRAINT [PK_EtlIncomingMailAttachments] PRIMARY KEY CLUSTERED ([SeqId] ASC)
);


GO
PRINT N'Creating [etl].[EtlMessages]...';


GO
CREATE TABLE [etl].[EtlMessages] (
    [SequentialId]   BIGINT           IDENTITY (1, 1) NOT NULL,
    [EtlPackageId]   UNIQUEIDENTIFIER NOT NULL,
    [EtlSessionId]   UNIQUEIDENTIFIER NOT NULL,
    [EtlStepName]    NVARCHAR (255)   NULL,
    [MessageType]    INT              NOT NULL,
    [Text]           NVARCHAR (MAX)   NULL,
    [Flags]          BIGINT           NULL,
    [StackTrace]     NVARCHAR (MAX)   NULL,
    [LogDateTime]    DATETIME         NOT NULL,
    [LogUtcDateTime] DATETIME         NOT NULL,
    CONSTRAINT [PK_EtlMessages_SequentialId] PRIMARY KEY CLUSTERED ([SequentialId] ASC)
);


GO
PRINT N'Creating [etl].[EtlMessages].[IX_EtlMessages_by_package_session]...';


GO
CREATE NONCLUSTERED INDEX [IX_EtlMessages_by_package_session]
    ON [etl].[EtlMessages]([EtlPackageId] ASC, [EtlSessionId] ASC);


GO
PRINT N'Creating [etl].[EtlPackages]...';


GO
CREATE TABLE [etl].[EtlPackages] (
    [Id]                 UNIQUEIDENTIFIER NOT NULL,
    [Name]               NVARCHAR (255)   NOT NULL,
    [Text]               NVARCHAR (MAX)   NULL,
    [RunIntervalSeconds] INT              NOT NULL,
    [Enabled]            BIT              NULL,
    CONSTRAINT [PK_EtlPackages_Id] PRIMARY KEY NONCLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [etl].[EtlSessions]...';


GO
CREATE TABLE [etl].[EtlSessions] (
    [EtlSessionId]       UNIQUEIDENTIFIER NOT NULL,
    [EtlPackageId]       UNIQUEIDENTIFIER NOT NULL,
    [EtlPackageName]     NVARCHAR (255)   NULL,
    [StartDateTime]      DATETIME         NULL,
    [StartUtcDateTime]   DATETIME         NULL,
    [EndDateTime]        DATETIME         NULL,
    [EndUtcDateTime]     DATETIME         NULL,
    [Status]             INT              NOT NULL,
    [ParentEtlSessionId] UNIQUEIDENTIFIER NULL,
    [UserName]           NVARCHAR (50)    NULL,
    [InsertDateTime]     DATETIME         NOT NULL,
    [InsertUtcDateTime]  DATETIME         NOT NULL,
    CONSTRAINT [PK_EtlSessions_EtlPackageIdEtlSessionId] PRIMARY KEY NONCLUSTERED ([EtlPackageId] ASC, [EtlSessionId] ASC),
    CONSTRAINT [AK_EtlSessions_EtlSessionId] UNIQUE NONCLUSTERED ([EtlSessionId] ASC)
);


GO
PRINT N'Creating [etl].[EtlVariables]...';


GO
CREATE TABLE [etl].[EtlVariables] (
    [EtlPackageId]   UNIQUEIDENTIFIER NOT NULL,
    [EtlSessionId]   UNIQUEIDENTIFIER NOT NULL,
    [Name]           NVARCHAR (50)    NOT NULL,
    [Modifier]       INT              NOT NULL,
    [Value]          NVARCHAR (1000)  NULL,
    [IsSecure]       BIT              NOT NULL,
    [LogDateTime]    DATETIME         NOT NULL,
    [LogUtcDateTime] DATETIME         NOT NULL
);


GO
PRINT N'Creating [etl].[EtlCounters]...';


GO
CREATE TABLE [etl].[EtlCounters] (
    [EtlPackageId]   UNIQUEIDENTIFIER NOT NULL,
    [EtlSessionId]   UNIQUEIDENTIFIER NOT NULL,
    [EntityName]     NVARCHAR (255)   NOT NULL,
    [CounterName]    NVARCHAR (255)   NOT NULL,
    [CounterValue]   BIGINT           NOT NULL,
    [LogDateTime]    DATETIME         NOT NULL,
    [LogUtcDateTime] DATETIME         NOT NULL
);


GO
PRINT N'Creating [etl].[EtlIncomingMails]...';


GO
CREATE TABLE [etl].[EtlIncomingMails] (
    [EtlPackageId] UNIQUEIDENTIFIER NOT NULL,
    [EtlSessionId] UNIQUEIDENTIFIER NOT NULL,
    [MessageUid]   BIGINT           NOT NULL,
    [MessageRaw]   NVARCHAR (MAX)   NULL,
    [IsDeleted]    BIT              NOT NULL,
    [InsertedDate] DATETIME         NOT NULL,
    CONSTRAINT [PK_EtlIncomingMails] PRIMARY KEY CLUSTERED ([EtlSessionId] ASC, [MessageUid] ASC)
);


GO
PRINT N'Creating [etl].[EtlFileCounter]...';


GO
CREATE TABLE [etl].[EtlFileCounter] (
    [EtlPackageId] UNIQUEIDENTIFIER NOT NULL,
    [EtlSessionId] UNIQUEIDENTIFIER NOT NULL,
    [FileTemplate] NVARCHAR (255)   NOT NULL,
    [FileCount]    INT              NOT NULL,
    [CounterDate]  DATE             NOT NULL,
    CONSTRAINT [PK_EtlFileCounter] PRIMARY KEY CLUSTERED ([FileTemplate] ASC, [CounterDate] ASC)
);


GO
PRINT N'Creating [etl].[EtlParameters]...';


GO
CREATE SYNONYM [etl].[EtlParameters] FOR [etl].[EtlVariables];


GO
PRINT N'Creating [etl].[EtlSessionVariables]...';


GO
CREATE SYNONYM [etl].[EtlSessionVariables] FOR [etl].[EtlVariables];


GO
PRINT N'Creating unnamed constraint on [etl].[EtlOutcomingMails]...';


GO
ALTER TABLE [etl].[EtlOutcomingMails]
    ADD DEFAULT (getdate()) FOR [InsertedDate];


GO
PRINT N'Creating [etl].[DF_EtlPackages_RunIntervalSeconds]...';


GO
ALTER TABLE [etl].[EtlPackages]
    ADD CONSTRAINT [DF_EtlPackages_RunIntervalSeconds] DEFAULT ((0)) FOR [RunIntervalSeconds];


GO
PRINT N'Creating unnamed constraint on [etl].[EtlSessions]...';


GO
ALTER TABLE [etl].[EtlSessions]
    ADD DEFAULT (getdate()) FOR [InsertDateTime];


GO
PRINT N'Creating unnamed constraint on [etl].[EtlSessions]...';


GO
ALTER TABLE [etl].[EtlSessions]
    ADD DEFAULT (getutcdate()) FOR [InsertUtcDateTime];


GO
PRINT N'Creating unnamed constraint on [etl].[EtlIncomingMails]...';


GO
ALTER TABLE [etl].[EtlIncomingMails]
    ADD DEFAULT ((0)) FOR [IsDeleted];


GO
PRINT N'Creating [etl].[DF_EtlIncomingMails_InsertedDate]...';


GO
ALTER TABLE [etl].[EtlIncomingMails]
    ADD CONSTRAINT [DF_EtlIncomingMails_InsertedDate] DEFAULT (getdate()) FOR [InsertedDate];


GO
PRINT N'Creating [etl].[FK_EtlOutcomingMailAttachments_EtlOutcomingMails]...';


GO
ALTER TABLE [etl].[EtlOutcomingMailAttachments]
    ADD CONSTRAINT [FK_EtlOutcomingMailAttachments_EtlOutcomingMails] FOREIGN KEY ([Id]) REFERENCES [etl].[EtlOutcomingMailAttachments] ([Id]);


GO
PRINT N'Creating [etl].[FK_EtlMessages_EtlPackageId]...';


GO
ALTER TABLE [etl].[EtlMessages]
    ADD CONSTRAINT [FK_EtlMessages_EtlPackageId] FOREIGN KEY ([EtlPackageId]) REFERENCES [etl].[EtlPackages] ([Id]);


GO
PRINT N'Creating [etl].[FK_EtlMessages_EtlSessions]...';


GO
ALTER TABLE [etl].[EtlMessages]
    ADD CONSTRAINT [FK_EtlMessages_EtlSessions] FOREIGN KEY ([EtlSessionId]) REFERENCES [etl].[EtlSessions] ([EtlSessionId]);


GO
PRINT N'Creating [etl].[FK_EtlSessions_ToTable]...';


GO
ALTER TABLE [etl].[EtlSessions]
    ADD CONSTRAINT [FK_EtlSessions_ToTable] FOREIGN KEY ([EtlPackageId]) REFERENCES [etl].[EtlPackages] ([Id]);


GO
PRINT N'Creating [etl].[FK_EtlVariables_EtlPackageId]...';


GO
ALTER TABLE [etl].[EtlVariables]
    ADD CONSTRAINT [FK_EtlVariables_EtlPackageId] FOREIGN KEY ([EtlPackageId]) REFERENCES [etl].[EtlPackages] ([Id]);


GO
PRINT N'Creating [etl].[FK_EtlVariables_EtlSessions]...';


GO
ALTER TABLE [etl].[EtlVariables]
    ADD CONSTRAINT [FK_EtlVariables_EtlSessions] FOREIGN KEY ([EtlSessionId]) REFERENCES [etl].[EtlSessions] ([EtlSessionId]);


GO
PRINT N'Creating [etl].[FK_EtlCounters_EtlPackageId]...';


GO
ALTER TABLE [etl].[EtlCounters]
    ADD CONSTRAINT [FK_EtlCounters_EtlPackageId] FOREIGN KEY ([EtlPackageId]) REFERENCES [etl].[EtlPackages] ([Id]);


GO
PRINT N'Creating [etl].[FK_EtlCounters_EtlSessions]...';


GO
ALTER TABLE [etl].[EtlCounters]
    ADD CONSTRAINT [FK_EtlCounters_EtlSessions] FOREIGN KEY ([EtlSessionId]) REFERENCES [etl].[EtlSessions] ([EtlSessionId]);


GO
PRINT N'Creating Permission...';


GO
GRANT CONNECT TO [dmidp];


GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
